@*
NAVIGATION BY LEVEL
=================================
This snippet makes it easy to do navigation based lists! It'll automatically list all children of a page with a certain 
level in the hierarchy that's published and visible (it'll filter out any pages with a property named "umbracoNaviHide"
that's set to 'true'.

How to Customize for re-use (only applies to Macros, not if you insert this snippet directly in a template):
- If you add a Macro Parameter with the alias of "Level" you can use this macro for both level 1 and level 2 navigations
- If you add a Macro Parameter with the alias of "ulClass" you can specify different css classes for the <UL/> element

How it works:
- The first two lines (var level... and var ulClass) assigns default values if none is specified via Macro Parameters
- Then it finds the correct parent based on the level and assigns it to the 'parent' variable.
- Then it runs through all the visible children in the foreach loop and outputs a list item
- Inside the list item it checks if the page added to the list is a parent of the current page. Then it marks it 'selected'

NOTE: It is safe to remove this comment (anything between @ * * @), the code that generates the list is only the below!
*@
@using umbraco.MacroEngines
@inherits umbraco.MacroEngines.DynamicNodeContext
<div class="col-sm-12">
    <div class="nav-principal">
        <ul class="nav nav-pills pull-right">
            @{ DynamicNode rootNode = new DynamicNode(-1);
               DynamicNode home = rootNode.Descendants("Home").Items.FirstOrDefault();
               var isPageSelected = string.Compare(home.NiceUrl, CurrentModel.NiceUrl);
               var selected = isPageSelected == 0 ? " class=\"active\"" : "";
                <li@Html.Raw(selected)><a href="@home.NiceUrl">@Dictionary.Home</a></li>
            }
            @{
                DynamicNode parentNode = CurrentModel.AncestorOrSelf("Home");
                foreach (DynamicNode itemMenu in parentNode.Descendants().Items.Where(x => x.HasProperty("isMainMenuItem").Equals(true)).Where(x => x.Level == 3))
                {
                    isPageSelected = string.Compare(itemMenu.NiceUrl, CurrentModel.NiceUrl);
                    selected = isPageSelected == 0 ? " class=\"active\"" : "";
                <li@Html.Raw(selected)><a href="@itemMenu.NiceUrl">@itemMenu.Name</a></li>
                                                              selected = string.Empty;
                }
            }
            @{
                DynamicNode blog = rootNode.Descendants("uBlogsyLanding").Items.FirstOrDefault();
                if (blog != null)
                {
                    isPageSelected = string.Compare(blog.NiceUrl, CurrentModel.NiceUrl);
                    selected = isPageSelected == 0 ? " class=\"active\"" : "";
                <li@Html.Raw(selected)><a href="@blog.NiceUrl">@Dictionary.Blog</a></li>
                }
                
            }
        </ul>
    </div>
</div>
@*var level = String.IsNullOrEmpty(Parameter.Level) ? 1 : int.Parse(Parameter.Level);
    var ulClass = String.IsNullOrEmpty(Parameter.UlClass) ? "" : String.Format(" class=\"{0}\"", Parameter.UlClass);
    var parent = @Model.AncestorOrSelf(level);
    if (parent != null)
    {
		<ul@Html.Raw(ulClass)>
		@foreach (var item in parent.Children.Where("Visible"))
  {
      
  }
		</ul>
	}
}*@ 